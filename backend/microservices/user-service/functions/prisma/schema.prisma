datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                String        @id @default(uuid())
    name              String
    email             String        @unique
    password          String
    bio               String?
    profile_image_url String?
    website_url       String?
    twitter_handle    String?
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
    karma_points      Int           @default(0)
    is_maker          Boolean       @default(false)
    location          String?
    skills            String[]      @default([])
    isVerified        Boolean       @default(false)
    products          Product[]
    teamProducts      TeamMember[]
    headline          String?
    about             String?
    role              String?
    currentCompany    String?
    github_url        String?
    linkedin_url      String?
    twitter_url       String?
    isAdmin           Boolean       @default(false)
    comments          Comment[]
    commentLikes      CommentLike[]
    reportsFiled      Report[]      @relation("UserReports")
    reportsResolved   Report[]      @relation("AdminResolvedReports")
}

model Product {
    id             String       @id @default(uuid())
    name           String       @unique
    tagline        String
    description    String       @db.Text
    websiteUrl     String?
    category       String
    images         Image[]
    videoUrl       String?
    techStack      String[]
    targetAudience String?
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    userId         String
    user           User         @relation(fields: [userId], references: [id])
    pricing        Pricing[]
    makers         TeamMember[]
    upvotes        Int?         @default(0)
    isApproved     Boolean?     @default(false)
    comments       Comment[] // Replace Json comments with relation
    reports        Report[] // Add reports relation
    isFeatured     Boolean?     @default(false)
}

model Image {
    id        String  @id @default(uuid())
    url       String
    productId String
    product   Product @relation(fields: [productId], references: [id])
}

model Pricing {
    id        String   @id @default(uuid())
    tier      String
    features  String[]
    productId String
    product   Product  @relation(fields: [productId], references: [id])
}

model TeamMember {
    id        String  @id @default(uuid())
    userId    String
    productId String
    product   Product @relation(fields: [productId], references: [id])
    user      User    @relation(fields: [userId], references: [id])
}

model Newsletter {
    id    String @id @default(uuid())
    email String

    @@map("newsletter_subscribers")
}

model Message {
    id        String        @id @default(cuid())
    name      String        @db.VarChar(100)
    email     String        @db.VarChar(255)
    message   String        @db.Text
    status    MessageStatus @default(PENDING)
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt

    @@map("messages")
}

enum MessageStatus {
    PENDING
    READ
    RESPONDED
    ARCHIVED
    SPAM
}

model Notification {
    id      String  @id @default(cuid())
    creator String
    status  String?
    tag     String
    message String
    read    String
}

model Comment {
    id        String   @id @default(uuid())
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
    user      User    @relation(fields: [userId], references: [id])
    userId    String

    // Nested comments (replies)
    parentComment Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
    parentId      String?
    replies       Comment[] @relation("CommentReplies")

    // Likes
    likes CommentLike[]

    // Reports
    reports Report[]

    @@index([productId])
    @@index([userId])
    @@index([parentId])
}

// New CommentLike model
model CommentLike {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String
    user      User    @relation(fields: [userId], references: [id])
    userId    String

    @@unique([commentId, userId])
    @@index([commentId])
    @@index([userId])
}

// New Report model
model Report {
    id         String       @id @default(uuid())
    type       ReportType
    reason     String
    details    String?      @db.Text
    status     ReportStatus @default(PENDING)
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    resolvedAt DateTime?

    // Reporter
    reportedBy User   @relation("UserReports", fields: [userId], references: [id])
    userId     String

    // What's being reported
    product   Product? @relation(fields: [productId], references: [id])
    productId String?
    comment   Comment? @relation(fields: [commentId], references: [id])
    commentId String?

    // Admin who resolved
    resolvedBy   User?   @relation("AdminResolvedReports", fields: [resolvedById], references: [id])
    resolvedById String?

    @@index([userId])
    @@index([productId])
    @@index([commentId])
    @@index([status])
}

enum ReportType {
    PRODUCT
    COMMENT
}

enum ReportStatus {
    PENDING
    APPROVED
    REJECTED
    RESOLVED
}
